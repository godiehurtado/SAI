//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Common;
using System.Data.EntityClient;
using System.Data.Metadata.Edm;
using System.Data.Objects.DataClasses;
using System.Data.Objects;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.Linq;
using ColpatriaSAI_WS.Entidades;

namespace ColpatriaSAI_WS.Datos
{
    public partial class SAI_WSEntityConnection : ObjectContext
    {
        public const string ConnectionString = "name=SAI_WSEntityConnection";
        public const string ContainerName = "SAI_WSEntityConnection";
    
        #region Constructors
    
        public SAI_WSEntityConnection()
            : base(ConnectionString, ContainerName)
        {
            Initialize();
        }
    
        public SAI_WSEntityConnection(string connectionString)
            : base(connectionString, ContainerName)
        {
            Initialize();
        }
    
        public SAI_WSEntityConnection(EntityConnection connection)
            : base(connection, ContainerName)
        {
            Initialize();
        }
    
        private void Initialize()
        {
            // Creating proxies requires the use of the ProxyDataContractResolver and
            // may allow lazy loading which can expand the loaded graph during serialization.
            ContextOptions.ProxyCreationEnabled = false;
            ObjectMaterialized += new ObjectMaterializedEventHandler(HandleObjectMaterialized);
        }
    
        private void HandleObjectMaterialized(object sender, ObjectMaterializedEventArgs e)
        {
            var entity = e.Entity as IObjectWithChangeTracker;
            if (entity != null)
            {
                bool changeTrackingEnabled = entity.ChangeTracker.ChangeTrackingEnabled;
                try
                {
                    entity.MarkAsUnchanged();
                }
                finally
                {
                    entity.ChangeTracker.ChangeTrackingEnabled = changeTrackingEnabled;
                }
                this.StoreReferenceKeyValues(entity);
            }
        }
    
        #endregion
    
        #region Function Imports
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        /// <param name="clave">No hay documentación de metadatos disponible.</param>
        /// <param name="anio">No hay documentación de metadatos disponible.</param>
        public virtual ObjectResult<ExtractoAsesor> ObtenerExtractoAsesor(string clave, Nullable<int> anio)
        {
    
            ObjectParameter claveParameter;
    
            if (clave != null)
            {
                claveParameter = new ObjectParameter("clave", clave);
            }
            else
            {
                claveParameter = new ObjectParameter("clave", typeof(string));
            }
    
            ObjectParameter anioParameter;
    
            if (anio.HasValue)
            {
                anioParameter = new ObjectParameter("anio", anio);
            }
            else
            {
                anioParameter = new ObjectParameter("anio", typeof(int));
            }
            return base.ExecuteFunction<ExtractoAsesor>("ObtenerExtractoAsesor", claveParameter, anioParameter);
        }
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        /// <param name="clave">No hay documentación de metadatos disponible.</param>
        /// <param name="anio">No hay documentación de metadatos disponible.</param>
        public virtual ObjectResult<PremioAsesor> ObtenerExtractoPremiosAsesor(string clave, Nullable<int> anio)
        {
    
            ObjectParameter claveParameter;
    
            if (clave != null)
            {
                claveParameter = new ObjectParameter("clave", clave);
            }
            else
            {
                claveParameter = new ObjectParameter("clave", typeof(string));
            }
    
            ObjectParameter anioParameter;
    
            if (anio.HasValue)
            {
                anioParameter = new ObjectParameter("anio", anio);
            }
            else
            {
                anioParameter = new ObjectParameter("anio", typeof(int));
            }
            return base.ExecuteFunction<PremioAsesor>("ObtenerExtractoPremiosAsesor", claveParameter, anioParameter);
        }
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        /// <param name="clave">No hay documentación de metadatos disponible.</param>
        /// <param name="anio">No hay documentación de metadatos disponible.</param>
        public virtual ObjectResult<ExtractoDetallePremioAsesor> ObtenerExtractoDetalladoPremiosAsesor(string clave, Nullable<int> anio)
        {
    
            ObjectParameter claveParameter;
    
            if (clave != null)
            {
                claveParameter = new ObjectParameter("clave", clave);
            }
            else
            {
                claveParameter = new ObjectParameter("clave", typeof(string));
            }
    
            ObjectParameter anioParameter;
    
            if (anio.HasValue)
            {
                anioParameter = new ObjectParameter("anio", anio);
            }
            else
            {
                anioParameter = new ObjectParameter("anio", typeof(int));
            }
            return base.ExecuteFunction<ExtractoDetallePremioAsesor>("ObtenerExtractoDetalladoPremiosAsesor", claveParameter, anioParameter);
        }
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        /// <param name="clave">No hay documentación de metadatos disponible.</param>
        /// <param name="anio">No hay documentación de metadatos disponible.</param>
        public virtual ObjectResult<SiniestralidadAutosAsesor> ObtenerExtractoSiniestralidadAutosAsesor(string clave, Nullable<int> anio)
        {
    
            ObjectParameter claveParameter;
    
            if (clave != null)
            {
                claveParameter = new ObjectParameter("clave", clave);
            }
            else
            {
                claveParameter = new ObjectParameter("clave", typeof(string));
            }
    
            ObjectParameter anioParameter;
    
            if (anio.HasValue)
            {
                anioParameter = new ObjectParameter("anio", anio);
            }
            else
            {
                anioParameter = new ObjectParameter("anio", typeof(int));
            }
            return base.ExecuteFunction<SiniestralidadAutosAsesor>("ObtenerExtractoSiniestralidadAutosAsesor", claveParameter, anioParameter);
        }
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        /// <param name="clave">No hay documentación de metadatos disponible.</param>
        /// <param name="anio">No hay documentación de metadatos disponible.</param>
        public virtual ObjectResult<PersistenciaCapitalizacionAsesor> ObtenerExtractoPersistenciaCapitalizacionAsesor(string clave, Nullable<int> anio)
        {
    
            ObjectParameter claveParameter;
    
            if (clave != null)
            {
                claveParameter = new ObjectParameter("clave", clave);
            }
            else
            {
                claveParameter = new ObjectParameter("clave", typeof(string));
            }
    
            ObjectParameter anioParameter;
    
            if (anio.HasValue)
            {
                anioParameter = new ObjectParameter("anio", anio);
            }
            else
            {
                anioParameter = new ObjectParameter("anio", typeof(int));
            }
            return base.ExecuteFunction<PersistenciaCapitalizacionAsesor>("ObtenerExtractoPersistenciaCapitalizacionAsesor", claveParameter, anioParameter);
        }
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        /// <param name="clave">No hay documentación de metadatos disponible.</param>
        /// <param name="anio">No hay documentación de metadatos disponible.</param>
        public virtual ObjectResult<PersistenciaVidaAsesor> ObtenerExtractoPersistenciaVidaAsesor(string clave, Nullable<int> anio)
        {
    
            ObjectParameter claveParameter;
    
            if (clave != null)
            {
                claveParameter = new ObjectParameter("clave", clave);
            }
            else
            {
                claveParameter = new ObjectParameter("clave", typeof(string));
            }
    
            ObjectParameter anioParameter;
    
            if (anio.HasValue)
            {
                anioParameter = new ObjectParameter("anio", anio);
            }
            else
            {
                anioParameter = new ObjectParameter("anio", typeof(int));
            }
            return base.ExecuteFunction<PersistenciaVidaAsesor>("ObtenerExtractoPersistenciaVidaAsesor", claveParameter, anioParameter);
        }

        #endregion

    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI_WS.Entidades
{
    
    [DataContract]
    public partial class ExtractoAsesor : INotifyComplexPropertyChanging, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public Nullable<int> idCompania
        {
            get { return _idCompania; }
            set
            {
                if (_idCompania != value)
                {
                    OnComplexPropertyChanging();
                    _idCompania = value;
                    OnPropertyChanged("idCompania");
                }
            }
        }
        private Nullable<int> _idCompania;
    
        [DataMember]
        public string compania
        {
            get { return _compania; }
            set
            {
                if (_compania != value)
                {
                    OnComplexPropertyChanging();
                    _compania = value;
                    OnPropertyChanged("compania");
                }
            }
        }
        private string _compania;
    
        [DataMember]
        public Nullable<int> idRamo
        {
            get { return _idRamo; }
            set
            {
                if (_idRamo != value)
                {
                    OnComplexPropertyChanging();
                    _idRamo = value;
                    OnPropertyChanged("idRamo");
                }
            }
        }
        private Nullable<int> _idRamo;
    
        [DataMember]
        public string ramo
        {
            get { return _ramo; }
            set
            {
                if (_ramo != value)
                {
                    OnComplexPropertyChanging();
                    _ramo = value;
                    OnPropertyChanged("ramo");
                }
            }
        }
        private string _ramo;
    
        [DataMember]
        public string medida
        {
            get { return _medida; }
            set
            {
                if (_medida != value)
                {
                    OnComplexPropertyChanging();
                    _medida = value;
                    OnPropertyChanged("medida");
                }
            }
        }
        private string _medida;
    
        [DataMember]
        public string mes
        {
            get { return _mes; }
            set
            {
                if (_mes != value)
                {
                    OnComplexPropertyChanging();
                    _mes = value;
                    OnPropertyChanged("mes");
                }
            }
        }
        private string _mes;
    
        [DataMember]
        public Nullable<double> valorAnioAnterior
        {
            get { return _valorAnioAnterior; }
            set
            {
                if (_valorAnioAnterior != value)
                {
                    OnComplexPropertyChanging();
                    _valorAnioAnterior = value;
                    OnPropertyChanged("valorAnioAnterior");
                }
            }
        }
        private Nullable<double> _valorAnioAnterior;
    
        [DataMember]
        public Nullable<double> valorAnioActual
        {
            get { return _valorAnioActual; }
            set
            {
                if (_valorAnioActual != value)
                {
                    OnComplexPropertyChanging();
                    _valorAnioActual = value;
                    OnPropertyChanged("valorAnioActual");
                }
            }
        }
        private Nullable<double> _valorAnioActual;
    
        [DataMember]
        public Nullable<double> porcentajeCrecimiento
        {
            get { return _porcentajeCrecimiento; }
            set
            {
                if (_porcentajeCrecimiento != value)
                {
                    OnComplexPropertyChanging();
                    _porcentajeCrecimiento = value;
                    OnPropertyChanged("porcentajeCrecimiento");
                }
            }
        }
        private Nullable<double> _porcentajeCrecimiento;

        #endregion
        #region ChangeTracking
    
        private void OnComplexPropertyChanging()
        {
            if (_complexPropertyChanging != null)
            {
                _complexPropertyChanging(this, new EventArgs());
            }
        }
    
        event EventHandler INotifyComplexPropertyChanging.ComplexPropertyChanging { add { _complexPropertyChanging += value; } remove { _complexPropertyChanging -= value; } }
        private event EventHandler _complexPropertyChanging;
    
        private void OnPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged { add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
    
        public static void RecordComplexOriginalValues(String parentPropertyName, ExtractoAsesor complexObject, ObjectChangeTracker changeTracker)
        {
            if (String.IsNullOrEmpty(parentPropertyName))
            {
                throw new ArgumentException("String parameter cannot be null or empty.", "parentPropertyName");
            }
    
            if (changeTracker == null)
            {
                throw new ArgumentNullException("changeTracker");
            }
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.idCompania", parentPropertyName), complexObject == null ? null : (object)complexObject.idCompania);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.compania", parentPropertyName), complexObject == null ? null : (object)complexObject.compania);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.idRamo", parentPropertyName), complexObject == null ? null : (object)complexObject.idRamo);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ramo", parentPropertyName), complexObject == null ? null : (object)complexObject.ramo);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.medida", parentPropertyName), complexObject == null ? null : (object)complexObject.medida);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.mes", parentPropertyName), complexObject == null ? null : (object)complexObject.mes);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.valorAnioAnterior", parentPropertyName), complexObject == null ? null : (object)complexObject.valorAnioAnterior);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.valorAnioActual", parentPropertyName), complexObject == null ? null : (object)complexObject.valorAnioActual);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.porcentajeCrecimiento", parentPropertyName), complexObject == null ? null : (object)complexObject.porcentajeCrecimiento);
        }

        #endregion
    }
}
